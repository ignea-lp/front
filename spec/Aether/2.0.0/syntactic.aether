# Transmuter front-end, front-end libraries and utilities for the
# Transmuter language processing infrastructure
# Copyright (C) 2024  Natan Junges <natanajunges@gmail.com>
# Copyright (C) 2024, 2025  The Transmuter Project
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

Grammar(start):
    Production {/Production} ;

Production:
    ProductionHeader ProductionBody ;

ProductionHeader:
    Identifier [/Condition]@lexical [/ProductionSpecifiers] Colon ;

ProductionBody:
    SelectionExpression Semicolon ;

Condition:
    CommercialAt DisjunctionCondition ;

ProductionSpecifiers:
    LeftParenthesis ProductionSpecifierList RightParenthesis ;

SelectionExpression:
    SequenceExpression {/
        (VerticalLine / Solidus@syntactic) SequenceExpression
    } ;

DisjunctionCondition:
    ConjunctionCondition {/DoubleVerticalLine ConjunctionCondition} ;

ProductionSpecifierList:
    ProductionSpecifier {/Comma ProductionSpecifier} ;

SequenceExpression:
    (IterationExpression {/IterationExpression})@lexical /
    (PrimaryExpression {/PrimaryExpression})@syntactic ;

ConjunctionCondition:
    NegationCondition {/DoubleAmpersand NegationCondition} ;

ProductionSpecifier:
    (
        ((PlusSign / HyphenMinus) Identifier / Ignore)@lexical /
        Start@syntactic
    ) [/Condition] ;

IterationExpression:
    (
        PrimaryExpression [/
            Asterisk / PlusSign / QuestionMark / ExpressionRange
        ]
    )@lexical /
    (
        (
            LeftCurlyBracket / LeftCurlyBracketSolidus
        ) SelectionExpression RightCurlyBracket
    )@syntactic ;

PrimaryExpression:
    (OrdChar / QuotedChar / FullStop / BracketExpression)@lexical /
    (Identifier [/Condition])@syntactic /
    LeftParenthesis SelectionExpression RightParenthesis [/
        Condition
    ]@syntactic /
    ((OptionalExpression / IterationExpression) [/Condition])@syntactic ;

NegationCondition:
    {/ExclamationMark} PrimaryCondition ;

OptionalExpression:
    (
        LeftSquareBracket / LeftSquareBracketSolidus
    ) SelectionExpression RightSquareBracket ;

PrimaryCondition:
    Identifier / LeftParenthesis DisjunctionCondition RightParenthesis ;
